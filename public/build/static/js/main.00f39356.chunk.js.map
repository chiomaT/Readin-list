{"version":3,"sources":["Queries/Queries.js","Components/BookDetails.jsx","Components/BookList.jsx","Components/AddBook.jsx","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","Object","taggedTemplateLiteral","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","books","map","item","key","id","console","log","className","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","index","onClick","e","setState","displayBooks","Components_BookDetails","AuthorList","gender","authorId","authors","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","value","displayAuthors","compose","client","ApolloClient","uri","cache","InMemoryCache","App","ApolloProvider","Components_BookList","AddBook","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.00f39356.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { graphql } from \"@apollo/client/react/hoc\";\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`;\nconst getBookQuery = gql`\nquery($id:ID){\nbook(id:$id) {\n    id\n    name\n    genre\n    author{\n        id\n        name\n        age\n        books{\n            name\n            id\n        }\n    }\n}\n}\n`;\nexport { getBooksQuery, getAuthorsQuery, addBookMutation ,getBookQuery};\n","import React, { Component } from \"react\";\nimport { graphql } from \"@apollo/client/react/hoc\";\nimport {getBookQuery} from '../Queries/Queries'\n\n\nclass BookDetails extends Component {\n  displayBookDetails(){\n    const {book} = this.props.data\n    if(book) {\n      return (\n        <div>\n          <h4>Name: {book.name}</h4>\n          <p>Genre: {book.genre}</p>\n          <p>Author: {book.author.name}</p>\n          <p>All books by this author:</p>\n          <ul>\n          {book.author.books.map(item => {\n            return <li key ={item.id}>{item.name}</li>\n          })}\n          </ul>\n        </div>\n      )\n    }else{\n      return (\n        <div>\n          no book selected...\n        </div>\n      )\n    }\n  }\nrender() {\nconsole.log(this.props)\n      return (\n        <div className= \"book-details\">\n         <h2>Book details</h2>\n         {this.displayBookDetails()}\n        </div>\n      );\n    }\n  }\n  \n  export default graphql(getBookQuery,{\n    options:(props) => {\n      return {\n        variables:{\n          id: props.bookId\n        }\n      }\n    }\n  })(BookDetails);","import React, { Component } from \"react\";\nimport { graphql } from \"@apollo/client/react/hoc\";\nimport {getBooksQuery} from '../Queries/Queries'\nimport BookDetails from \"../Components/BookDetails\"\n\n\nclass BookList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected:null\n    }\n  }\n  displayBooks() {\n    let data = this.props.data;\n    if (data.loading) {\n      return <h1>Loading books...</h1>;\n    } else {\n      return data.books.map((book, index) => {\n        return <li key={book.id} onClick={(e) =>{this.setState({selected:book.id})}}>{book.name}</li>;\n      });\n    }\n  }\n  render() {\n    // console.log(this.props)\n    return (\n      <div>\n        <ul className=\"book-list\">{this.displayBooks()}</ul>\n        <BookDetails bookId={this.state.selected}/>\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from \"react\";\nimport { graphql } from \"@apollo/client/react/hoc\";\nimport {flowRight as compose} from 'lodash';\nimport {getBooksQuery, getAuthorsQuery,addBookMutation} from '../Queries/Queries'\n\n\n\nclass AuthorList extends Component {\n//a function to add books\nconstructor(props) {\n    super(props) \n    this.state = {\n        name:\"\",\n        gender:\"\",\n        authorId:\"\"\n    }\n}\n  //display authors in the select box\n  displayAuthors() {\n    let data = this.props.getAuthorsQuery;\n    if (data.loading) {\n      return <option>Loading authors...</option>;\n    } else {\n      return data.authors.map((author, index) => {\n        return <option key={author.id}>{author.name}</option>;\n      });\n    }\n  }\n  //submit function\n  submitForm(e) {\n      e.preventDefault();\n     this.props.addBookMutation({\n         variables: {\n             name:this.state.name,\n             genre:this.state.genre,\n             authorId:this.state.authorId\n         },\n         refetchQueries:[{ query:getBooksQuery }]\n     })\n  }\n\n  render() {\n    // console.log(this.props)\n    return (\n      <form className=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n        <div className=\"field\">\n          <label>Book Name:</label>\n          <input type=\"text\" onChange={(e) =>this.setState({name:e.target.value})}></input>\n        </div>\n\n        <div className=\"field\">\n          <label>Genre:</label>\n          <input type=\"text\" onChange={(e) =>this.setState({genre:e.target.value})}></input>\n        </div>\n\n        <div className=\"field\">\n          <label>Author:</label>\n          <select onChange={(e) =>this.setState({authorId:e.target.value})}>\n            <option>Select author</option>\n            {this.displayAuthors()}\n          </select>\n        </div>\n\n        <button>+</button>\n      </form>\n    );\n  }\n}\n\nexport default compose(\n    //bind querie and mutation together\ngraphql(getAuthorsQuery, {name:\"getAuthorsQuery\"}),\ngraphql(addBookMutation, {name:\"addBookMutation\"})\n)\n(AuthorList);\n","import React, { Component } from \"react\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\n//components\nimport BookList from \"../src/Components/BookList\";\nimport AuthorList from \"../src/Components/AddBook\";\n\n//apollo client setup\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\",\n  cache: new InMemoryCache(),\n});\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"main\">\n          <h1>Reading List</h1>\n          <BookList />\n          <AuthorList />\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App'\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}